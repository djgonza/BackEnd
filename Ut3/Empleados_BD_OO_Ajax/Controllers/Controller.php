<?phpclass Controller {	private $path = "Views/";	public function run () {		/* Ajax */		if(!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {			/* Search */			if(isset($_GET["section"]) && $_GET["section"] == "search") {				$dao = new DaoEmpleado();				// Limpiamos los datos				$this->cleanData ();				// Buscamos los registros				$result = $dao->getEmpleados($_POST["nss"]);				//echo json_encode($result);				include $this->path."tableList.php";			}			exit();		}		/* Insert */		if (isset($_GET["section"]) && $_GET["section"] == "insert"){			$this->insert();			exit ();		}		if (isset($_POST["insert"]) && $_POST["insert"] == "Insertar"){			$this->insert(true);			exit ();		}		/* Search */		if (isset($_GET["section"]) && $_GET["section"] == "search"){			$this->search();			exit ();		}		/* Balance */		if (isset($_GET["section"]) && $_GET["section"] == "balance"){			$this->balance();			exit ();		}		/* Delete */		if (isset($_POST["delete"])){			$this->delete($_POST["nss"]);			exit();		}		/* Update */		if (isset($_POST["update"]) && $_POST["update"] == "Editar"){			$this->getUpdateData($_POST["nss"]);			exit();		}		if (isset($_POST["update"]) && $_POST["update"] == "Actualizar"){			$this->update();			exit();		}		// Default		$this->listRows ();			}	public function cleanData () {		foreach ($_POST as $key => $value) {			$_POST[$key] = htmlspecialchars($_POST[$key]);		}	}	public function createValidatorRules () {		return array(			"nombre" => array("requiered" => true),			"apellido" => array("requiered" => true),			"nss" => array("requiered" => true),			"fijo" => array("requiered" => true),			"ventasbrutas" => array("requiered" => true),			"tarifacomision" => array("min" => 2, "requiered" => true)			);	}	public function insert ($validate = false) {		// Validamos los datos		if ($validate){			// Limpiamos los datos			$this->cleanData ();			// Creamos el validador			$validator = new Validator ();			$validator->setValidatorRules ($this->createValidatorRules ());			$validator->validate ($_POST);			// Error validacion			if ($validator->isValid()){				// Creamos el empleado				$empleado = new EmpleadoPorComision($_POST["nombre"], $_POST["apellido"], $_POST["nss"], $_POST["fijo"], $_POST["ventasbrutas"], $_POST["tarifacomision"]);				// Creamos el DAO				$dao = new DaoEmpleado();				// Insertamos el empleado				$dao->insertEmpleado($empleado);				// Redirigimos a listar				$this->listRows ($msg = ["El empleado se registro con exito!"]);				return;			}		}		// Mostramos la vista		include $this->path."insert.php";			}	public function search () {		$dao = new DaoEmpleado();		if (isset($_POST["nss"])){			// Limpiamos los datos			$this->cleanData ();			// Buscamos los registros			$result = $dao->getEmpleados($_POST["nss"]);		}else{			$result = $dao->getEmpleados();		}		include $this->path."search.php";	}	public function listRows ($msg = []) {		$dao = new DaoEmpleado();		$result = $dao->listEmpleados();		include $this->path."listRows.php";	}	public function balance () {		include $this->path."balance.php";	}	public function delete ($nss) {		$dao = new DaoEmpleado();		$dao->deleteEmpleado ($nss);		$this->listRows ($msg = ["El empleado se borro con exito!"]);	}	public function getUpdateData ($nss) {		$dao = new DaoEmpleado();		$datosEmpleado = $dao->getEmpleado($nss)[0];		$empleado = new EmpleadoPorComision(							$datosEmpleado["nombre"], 							$datosEmpleado["apellido"], 							$datosEmpleado["nss"], 							$datosEmpleado["fijo"], 							$datosEmpleado["ventasbrutas"], 							$datosEmpleado["tarifacomision"]		);		include $this->path."update.php";	}	public function update () {		$this->cleanData();		$empleado = new EmpleadoPorComision(							$_POST["nombre"], 							$_POST["apellido"], 							$_POST["nss"], 							$_POST["fijo"], 							$_POST["ventasbrutas"], 							$_POST["tarifacomision"]		);		$dao = new DaoEmpleado();		$dao->updateEmpleado ($empleado);		$this->listRows ($msg = ["El empleado se actualizo con exito!"]);	}}?>